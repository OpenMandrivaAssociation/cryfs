diff -up cryfs-1.0.1/cmake-utils/Dependencies.cmake.4~ cryfs-1.0.1/cmake-utils/Dependencies.cmake
--- cryfs-1.0.1/cmake-utils/Dependencies.cmake.4~	2025-04-12 03:55:37.398730651 +0200
+++ cryfs-1.0.1/cmake-utils/Dependencies.cmake	2025-04-12 03:55:42.781992689 +0200
@@ -9,7 +9,7 @@ find_package(Boost 1.84.0
         REQUIRED
         COMPONENTS filesystem system thread chrono program_options)
 add_library(CryfsDependencies_boost INTERFACE)
-target_link_libraries(CryfsDependencies_boost INTERFACE Boost::boost Boost::filesystem Boost::thread Boost::chrono Boost::program_options)
+target_link_libraries(CryfsDependencies_boost INTERFACE Boost::boost Boost::filesystem Boost::thread Boost::chrono Boost::program_options boost_process)
 if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
     # Also link to rt, because boost thread needs that.
     target_link_libraries(CryfsDependencies_boost INTERFACE rt)
@@ -30,4 +30,4 @@ if (BUILD_TESTING)
     find_package(GTest REQUIRED)
     add_library(CryfsDependencies_gtest INTERFACE)
     target_link_libraries(CryfsDependencies_gtest INTERFACE GTest::gtest GTest::gmock)
-endif()
\ No newline at end of file
+endif()
diff -up cryfs-1.0.1/src/cpp-utils/process/subprocess.cpp.4~ cryfs-1.0.1/src/cpp-utils/process/subprocess.cpp
--- cryfs-1.0.1/src/cpp-utils/process/subprocess.cpp.4~	2024-11-23 08:24:23.000000000 +0100
+++ cryfs-1.0.1/src/cpp-utils/process/subprocess.cpp	2025-04-12 03:56:50.161850183 +0200
@@ -2,6 +2,12 @@
 #include <array>
 #include <boost/asio.hpp>
 #include <boost/process.hpp>
+#include <boost/process/v1/args.hpp>
+#include <boost/process/v1/async.hpp>
+#include <boost/process/v1/child.hpp>
+#include <boost/process/v1/exe.hpp>
+#include <boost/process/v1/search_path.hpp>
+#include <boost/process/v1/io.hpp>
 #include <cerrno>
 #include <cstddef>
 #include <cstdio>
@@ -27,7 +33,7 @@ namespace cpputils
 	{
 		bf::path _find_executable(const char *command)
 		{
-			bf::path executable = bp::search_path(command);
+			bf::path executable = bp::v1::search_path(command);
 			if (executable == "")
 			{
 				throw std::runtime_error("Tried to run command " + std::string(command) + " but didn't find it in the PATH");
@@ -63,7 +69,7 @@ namespace cpputils
 				ba::async_read(pipe_, buffer_, onOutput);
 			}
 
-			bp::async_pipe& pipe()
+			bp::v1::async_pipe& pipe()
 			{
 				return pipe_;
 			}
@@ -77,7 +83,7 @@ namespace cpputils
 		private:
 			std::vector<char> vOut_;
 			ba::mutable_buffer buffer_;
-			bp::async_pipe pipe_;
+			bp::v1::async_pipe pipe_;
 			std::string output_;
 		};
 
@@ -91,7 +97,7 @@ namespace cpputils
 
 			}
 
-			bp::async_pipe& pipe()
+			bp::v1::async_pipe& pipe()
 			{
 				return pipe_;
 			}
@@ -111,7 +117,7 @@ namespace cpputils
 		private:
 			const std::string* input_;
 			ba::const_buffer buffer_;
-			bp::async_pipe pipe_;
+			bp::v1::async_pipe pipe_;
 		};
 	}
 
@@ -142,12 +148,12 @@ namespace cpputils
 		OutputPipeHandler stderr_handler(&ctx);
 		InputPipeHandler stdin_handler(&ctx, &input);
 
-		bp::child child(
-			bp::exe = executable.string(),
-			bp::args(args),
-			bp::std_out > stdout_handler.pipe(),
-			bp::std_err > stderr_handler.pipe(),
-			bp::std_in < stdin_handler.pipe()
+		bp::v1::child child(
+			bp::v1::exe = executable.string(),
+			bp::v1::args(args),
+			bp::v1::std_out > stdout_handler.pipe(),
+			bp::v1::std_err > stderr_handler.pipe(),
+			bp::v1::std_in < stdin_handler.pipe()
 		);
 
 		stdin_handler.async_write();
